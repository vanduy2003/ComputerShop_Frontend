import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";
import { useUserStore } from "@/stores/userStore";
import { computed } from "vue";
import { useToast } from "vue-toastification";
import { safeParseJSON } from "../utils/utils"; // Import h√†m parse JSON
import { useRouter } from "vue-router";
import Swal from "sweetalert2";

export const useCartStore = defineStore("cart", () => {
    const cart = ref([]);
    const userStore = useUserStore(); // L·∫•y userStore
    const userId = computed(() => userStore.user?.userId); // L·∫•y userId t·ª´ userStore
    const toast = useToast();
    const orderId = ref(null);
    const router = useRouter();
    const discount = ref(0); // L∆∞u gi√° tr·ªã gi·∫£m gi√° t·ª´ voucher

    // Computed ƒë·ªÉ t√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    const countItems = computed(() => {
        return cart.value.reduce((total, item) => total + item.quantity, 0);
    });

    // ‚úÖ T·ªïng gi√° ch∆∞a gi·∫£m
    const totalCartPrice = computed(() => {
        return cart.value.reduce(
            (total, item) => total + item.quantity * item.priceNew,
            0
        );
    });

    // ‚úÖ T·ªïng gi√° sau khi √°p d·ª•ng voucher
    const discountedTotal = computed(() => {
        return Math.max(0, totalCartPrice.value - discount.value);
    });

    // ‚úÖ H√†m √°p d·ª•ng m√£ gi·∫£m gi√°
    const applyVoucher = (voucherCode) => {
        const voucherList = [
            { code: "SALE1000", discount: 1000000 },
            { code: "DISCOUNT500", discount: 500000 },
            { code: "FREESHIP", discount: 50000 },
        ];

        const foundVoucher = voucherList.find(
            (v) => v.code === voucherCode.toUpperCase()
        );

        if (foundVoucher) {
            discount.value = foundVoucher.discount;
            toast.success(
                `√Åp d·ª•ng m√£: ${
                    foundVoucher.code
                } (-${foundVoucher.discount.toLocaleString("vi-VN")}ƒë)`
            );
        } else {
            discount.value = 0;
            toast.error("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá");
        }
    };

    // H√†m th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    const addToCart = async (productId, quantity) => {
        if (!userId.value) {
            // Truy c·∫≠p gi√° tr·ªã th·ª±c c·ªßa computed
            toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng");
            return;
        }

        try {
            await axios.post(
                "http://localhost:3000/api/v1/data/add-cart",
                {
                    userId: userId.value, // L·∫•y gi√° tr·ªã th·ª±c, kh√¥ng truy·ªÅn tr·ª±c ti·∫øp computed
                    productId,
                    quantity,
                },
                { withCredentials: true }
            );

            const confirm = await Swal.fire({
                icon: "success",
                title: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!",
                text: "B·∫°n c√≥ mu·ªën xem gi·ªè h√†ng kh√¥ng?",
                showCancelButton: true,
                confirmButtonText: "Xem gi·ªè h√†ng",
                cancelButtonText: "Ti·∫øp t·ª•c mua s·∫Øm",
            });

            if (confirm.isConfirmed) {
                router.push("/me/cart"); // ‚úÖ Chuy·ªÉn ƒë·∫øn trang gi·ªè h√†ng
            }

            fetchCart(); // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
        } catch (error) {
            console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
            toast.error("Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i!");
        }
    };

    // H√†m mua s·∫£n ph·∫©m + v√†o gi·ªè h√†ng
    const buyToCart = async (productId, quantity) => {
        if (!userId.value) {
            toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ mua s·∫£n ph·∫©m");
            return;
        }

        try {
            await axios.post(
                "http://localhost:3000/api/v1/data/add-cart",
                {
                    userId: userId.value,
                    productId,
                    quantity,
                },
                { withCredentials: true }
            );

            router.push("/me/cart"); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang gi·ªè h√†ng
            fetchCart(); // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
        } catch (error) {
            console.error("L·ªói khi mua s·∫£n ph·∫©m:", error);
            toast.error(
                error.response?.data?.message || "Mua s·∫£n ph·∫©m th·∫•t b·∫°i!"
            );
        }
    };

    // H√†m l·∫•y gi·ªè h√†ng t·ª´ API
    const fetchCart = async () => {
        if (!userId.value) {
            toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng");
            return;
        }

        try {
            const response = await axios.get(
                `http://localhost:3000/api/v1/data/get-cart/${userId.value}`
            );

            // Parse JSON an to√†n
            cart.value = response.data.map((item) => ({
                ...item,
                components: safeParseJSON(item.components, []),
            }));
        } catch (error) {
            console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
        }
    };

    // H√†m x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    const removeFromCart = async (cartId) => {
        const confirm = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, X√≥a s·∫£n ph·∫©m",
            cancelButtonText: "H·ªßy",
        });

        if (!confirm.isConfirmed) return; // N·∫øu ng∆∞·ªùi d√πng kh√¥ng x√°c nh·∫≠n th√¨ kh√¥ng l√†m g√¨ c·∫£

        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/delete-cart/${cartId}`
            );

            if (!response.data?.success) {
                throw new Error(
                    response.data?.message || "X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i!"
                );
            }

            toast.success("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
            await fetchCart(); // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng
        } catch (error) {
            console.error("L·ªói khi x√≥a gi·ªè h√†ng:", error);
            toast.error(
                error.response?.data?.message ||
                    "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th·∫•t b·∫°i!"
            );
        }
    };

    // H√†m tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    const increaseQuantity = async (cartId) => {
        const item = cart.value.find((i) => i.cartId === cartId);
        if (!item) return;

        try {
            const response = await axios.put(
                "http://localhost:3000/api/v1/data/update-cart",
                {
                    cartId,
                    quantity: item.quantity + 1,
                }
            );

            if (!response.data.success) {
                throw new Error(response.data.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
            }
            item.quantity += 1; // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp tr√™n giao di·ªán
        } catch (error) {
            console.error("L·ªói khi tƒÉng s·ªë l∆∞·ª£ng:", error);
            toast.error(
                error.response?.data?.message || "TƒÉng s·ªë l∆∞·ª£ng th·∫•t b·∫°i!"
            );
        }
    };

    // H√†m gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    const decreaseQuantity = async (cartId) => {
        const item = cart.value.find((i) => i.cartId === cartId);
        if (!item || item.quantity <= 1) return;

        try {
            const response = await axios.put(
                "http://localhost:3000/api/v1/data/update-cart",
                {
                    cartId,
                    quantity: item.quantity - 1,
                }
            );

            if (!response.data.success) {
                throw new Error(response.data.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
            }

            item.quantity -= 1; // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp tr√™n giao di·ªán
        } catch (error) {
            console.error("L·ªói khi gi·∫£m s·ªë l∆∞·ª£ng:", error);
            toast.error(
                error.response?.data?.message || "Gi·∫£m s·ªë l∆∞·ª£ng th·∫•t b·∫°i!"
            );
        }
    };

    // H√†m t·∫°o ƒë∆°n h√†ng
    const createOrder = async (orderData) => {
        try {
            const response = await axios.post(
                "http://localhost:3000/api/v1/data/create-order",
                orderData
            );

            if (!response.data.success) {
                throw new Error(
                    response.data.message || "T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i!"
                );
            }

            orderId.value = response.data.orderId;

            return response.data; // Tr·∫£ v·ªÅ lu√¥n to√†n b·ªô response ƒë·ªÉ x·ª≠ l√Ω sau
        } catch (error) {
            console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
            throw new Error(
                error.response?.data?.message || "ƒê·∫∑t h√†ng th·∫•t b·∫°i!"
            ); // üî• N√©m l·ªói ra ngo√†i ƒë·ªÉ handleConfirmOrder b·∫Øt
        }
    };

    return {
        cart,
        userId,
        countItems,
        totalCartPrice,
        orderId,
        discountedTotal, // Gi√° sau khi gi·∫£m
        discount, // Gi√° tr·ªã gi·∫£m gi√°
        applyVoucher, // H√†m √°p d·ª•ng m√£ gi·∫£m gi√°
        addToCart,
        fetchCart,
        removeFromCart,
        increaseQuantity,
        decreaseQuantity,
        createOrder,
        buyToCart,
    };
});
