import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";
import dayjs from "dayjs";
import Swal from "sweetalert2";

export const useSupplierStore = defineStore("supplier", () => {
    const suppliers = ref([]); // Danh s√°ch nh√† cung c·∫•p

    // H√†m g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch nh√† cung c·∫•p
    const fetchSupplier = async () => {
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/suppliers"
            );
            suppliers.value = response.data.map((supplier) => ({
                ...supplier,
                updatedAt: dayjs(supplier.updatedAt).format(
                    "DD/MM/YYYY, HH:mm A"
                ),
            }));
        } catch (error) {
            console.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu nh√† cung c·∫•p:", error);
        }
    };

    // Th√™m nh√† cung c·∫•p m·ªõi
    const addSupplier = async (supplier) => {
        try {
            const response = await axios.post(
                "http://localhost:3000/api/v1/data/suppliers/add-supplier",
                supplier
            );

            if (response.data.success && response.data.newSupplier) {
                suppliers.value.unshift(response.data.newSupplier);
                return true;
            } else {
                console.error("‚ö†Ô∏è D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", response.data);
                return false;
            }
        } catch (error) {
            console.error("üö® L·ªói khi th√™m nh√† cung c·∫•p:", error);
            return false;
        }
    };

    // S·ª≠a nh√† cung c·∫•p
    const updateSupplier = async (supplier) => {
        try {
            const response = await axios.put(
                `http://localhost:3000/api/v1/data/suppliers/update-supplier/${supplier.supplierId}`,
                supplier
            );

            if (response.data.success) {
                const index = suppliers.value.findIndex(
                    (item) => item.supplierId === supplier.supplierId
                );
                suppliers.value[index] = supplier;
                return true;
            } else {
                console.error("‚ö†Ô∏è D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", response.data);
                return false;
            }
        } catch (error) {
            console.error("üö® L·ªói khi s·ª≠a nh√† cung c·∫•p:", error);
            return false;
        }
    };

    // üü¢ X√≥a nh√† cung c·∫•p
    const deleteSupplier = async (supplierId) => {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        const result = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√† cung c·∫•p n√†y kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, x√≥a ngay!",
            cancelButtonText: "H·ªßy",
        });

        if (!result.isConfirmed) {
            return;
        }

        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/suppliers/delete-supplier/${supplierId}`
            );

            if (response.data.success) {
                // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch nh√† cung c·∫•p
                suppliers.value = suppliers.value.filter(
                    (supplier) => supplier.supplierId !== supplierId
                );

                // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                Swal.fire({
                    icon: "success",
                    title: "Th√†nh c√¥ng",
                    text: "X√≥a nh√† cung c·∫•p th√†nh c√¥ng!",
                    showConfirmButton: false,
                    timer: 1500,
                });
            } else {
                console.error("‚ö†Ô∏è X√≥a kh√¥ng th√†nh c√¥ng:", response.data);
            }
        } catch (err) {
            if (
                err.response &&
                err.response.status === 409 &&
                err.response.data.errorCode === "ER_ROW_IS_REFERENCED_2"
            ) {
                // ‚ö†Ô∏è L·ªói do nh√† cung c·∫•p ƒëang ƒë∆∞·ª£c tham chi·∫øu b·ªüi s·∫£n ph·∫©m
                Swal.fire({
                    icon: "error",
                    title: "Kh√¥ng th·ªÉ x√≥a",
                    text: "Nh√† cung c·∫•p n√†y ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong s·∫£n ph·∫©m. Vui l√≤ng x√≥a ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m tr∆∞·ªõc.",
                });
            } else {
                // ‚ö†Ô∏è L·ªói kh√°c
                Swal.fire({
                    icon: "error",
                    title: "L·ªói",
                    text: "ƒê√£ x·∫£y ra l·ªói khi x√≥a nh√† cung c·∫•p.",
                });
                console.error("üö® L·ªói khi x√≥a nh√† cung c·∫•p:", err);
            }
        }
    };

    return {
        suppliers,
        fetchSupplier,
        addSupplier,
        updateSupplier,
        deleteSupplier,
    };
});
