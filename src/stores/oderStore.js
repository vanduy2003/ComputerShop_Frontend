import { defineStore } from "pinia";
import { ref, computed } from "vue";
import axios from "axios";
import dayjs from "dayjs";
import Swal from "sweetalert2";

export const useOrderStore = defineStore("orders", () => {
    const orders = ref([]);
    const order = ref({});
    const potentialCustomers = ref([]);

    // T√≠nh t·ªïng s·ªë ƒë∆°n h√†ng
    const countOrders = computed(() => orders.value.length);

    // T√≠nh s·ªë ƒë∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω
    const pendingOrders = computed(() => {
        return orders.value.filter((order) => order.order_status === "pending")
            .length;
    });

    // l·∫•y kh√°ch h√†ng ti·ªÅm nƒÉng
    const fetchPotentialCustomers = async () => {
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/potential-customers"
            );
            potentialCustomers.value = response.data.potentialCustomers;
        } catch (error) {
            console.error(error);
        }
    };

    // T√≠nh t·ªïng ti·ªÅn c·ªßa t·∫•t c·∫£ ƒë∆°n h√†ng (ƒë√£ ho√†n th√†nh)
    const totalOrders = computed(() => {
        return orders.value
            .filter((order) => order.order_status === "completed")
            .reduce((total, order) => {
                const price = Number(order.total_price); // Chuy·ªÉn ƒë·ªïi sang s·ªë
                return total + (isNaN(price) ? 0 : price); // N·∫øu `price` l√† NaN, thay b·∫±ng 0
            }, 0);
    });

    // T√≠nh s·ªë ƒë∆°n h√†ng ƒë√£ h·ªßy
    const cancelledOrders = computed(() => {
        return orders.value.filter(
            (order) => order.order_status === "cancelled"
        ).length;
    });

    // T√≠nh s·ªë ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh
    const completedOrders = computed(() => {
        return orders.value.filter(
            (order) => order.order_status === "completed"
        ).length;
    });

    // L·∫•y danh s√°ch ƒë∆°n h√†ng
    const fetchOders = async () => {
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/orders"
            );

            // Gi·ªØ l·∫°i gi√° tr·ªã g·ªëc c·ªßa created_at v√† ch·ªâ ƒë·ªãnh d·∫°ng khi c·∫ßn
            orders.value = response.data.orders.map((order) => ({
                ...order,
                created_at: dayjs(order.created_at), // Gi·ªØ l·∫°i dayjs ƒë·ªëi t∆∞·ª£ng
            }));
        } catch (error) {
            console.error(error);
        }
    };

    // L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
    const fetchOrderById = async (orderId) => {
        console.log("orderId", orderId);
        try {
            const response = await axios.get(
                `http://localhost:3000/api/v1/data/buy-success/${orderId}`
            );
            if (response.data.success) {
                // format ng√†y th√°ng
                response.data.order.updated_at = dayjs(
                    response.data.order.updated_at
                ).format("DD/MM/YYYY, HH:mm A");

                order.value = response.data.order;
            } else {
                console.error("‚ö†Ô∏è ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!");
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng:", error);
        }
    };

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const updateOrderStatus = async (orderId, status) => {
        try {
            const response = await axios.put(
                `http://localhost:3000/api/v1/data/update-status/${orderId}`,
                { status }
            );
            if (response.data.success) {
                return response.data.success;
            } else {
                console.error("‚ö†Ô∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th·∫•t b·∫°i!");
            }
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
        }
    };

    // X√≥a ƒë∆°n h√†ng
    const deleteOrder = async (orderId) => {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        const confirm = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng n√†y?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, X√≥a ƒë∆°n h√†ng",
            cancelButtonText: "H·ªßy",
        });

        if (!confirm.isConfirmed) return; // N·∫øu ng∆∞·ªùi d√πng kh√¥ng x√°c nh·∫≠n th√¨ kh√¥ng l√†m g√¨ c·∫£

        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/delete-order/${orderId}`
            );
            if (response.data.success) {
                return response.data.success; // Tr·∫£ v·ªÅ gi√° tr·ªã th√†nh c√¥ng
            } else {
                console.error("‚ö†Ô∏è X√≥a ƒë∆°n h√†ng th·∫•t b·∫°i!");
            }
        } catch (error) {
            console.error("L·ªói khi x√≥a ƒë∆°n h√†ng:", error);
        }
    };

    // L·∫•y ƒë∆°n h√†ng theo userId
    const fetchOrderByUser = async (userId) => {
        try {
            const response = await axios.get(
                `http://localhost:3000/api/v1/data/list-orders/${userId}`
            );

            orders.value = response.data.orders.map((order) => ({
                ...order,
                created_at: dayjs(order.created_at).format("DD/MM/YYYY, HH:mm"),
            }));
        } catch (error) {
            console.error(error);
        }
    };

    // H·ªßy ƒë∆°n h√†ng
    const cancelOrder = async (orderId) => {
        try {
            // üõ† G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "cancelled"
            const response = await axios.put(
                `http://localhost:3000/api/v1/data/update-status/${orderId}`,
                {
                    status: "cancelled",
                }
            );
            if (response.data.success) {
                console.log("H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng!");
                return response.data.success;
            } else {
                console.error("‚ö†Ô∏è H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i!");
            }
        } catch (error) {
            console.error("L·ªói khi h·ªßy ƒë∆°n h√†ng:", error);
        }
    };

    return {
        orders,
        order,
        totalOrders,
        countOrders,
        cancelledOrders,
        pendingOrders,
        completedOrders,
        fetchOders,
        fetchOrderById,
        updateOrderStatus,
        deleteOrder,
        fetchOrderByUser,
        cancelOrder,
        fetchPotentialCustomers,
        potentialCustomers,
    };
});
