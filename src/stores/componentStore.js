// stores/componentStore.ts
import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";
import Swal from "sweetalert2";

export const useComponentStore = defineStore("component", () => {
    const components = ref([]); // Danh s√°ch linh ki·ªán
    const error = ref(null);

    // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ linh ki·ªán
    const fetchComponent = async () => {
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/components"
            );
            components.value = response.data;
            console.log("components", components.value);
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m";
            console.error(err);
        }
    };

    // üü¢ Th√™m linh ki·ªán m·ªõi
    const addComponent = async (component) => {
        try {
            const response = await axios.post(
                "http://localhost:3000/api/v1/data/components/add-component",
                component
            );
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            Swal.fire({
                icon: "success",
                title: "Th√†nh c√¥ng",
                text: "Th√™m linh ki·ªán th√†nh c√¥ng",
                showConfirmButton: false,
                timer: 1500,
            });

            if (response.data.success) {
                const newComponent = response.data.component;
                if (
                    !newComponent ||
                    !newComponent.componentId ||
                    !newComponent.name
                ) {
                    console.error("D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", newComponent);
                    return;
                }
                // ‚úÖ Th√™m tr·ª±c ti·∫øp v√†o danh s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
                components.value.unshift(newComponent);
            }
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ th√™m linh ki·ªán";
            console.error(err);
        }
    };

    // üü¢ C·∫≠p nh·∫≠t linh ki·ªán
    const updateComponent = async (component) => {
        try {
            const response = await axios.put(
                `http://localhost:3000/api/v1/data/components/update-component/${component.componentId}`,
                component
            );
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            Swal.fire({
                icon: "success",
                title: "Th√†nh c√¥ng",
                text: "C·∫≠p nh·∫≠t linh ki·ªán th√†nh c√¥ng",
                showConfirmButton: false,
                timer: 1500,
            });

            if (response.data.success) {
                const updatedComponent = response.data.component;
                if (
                    !updatedComponent ||
                    !updatedComponent.componentId ||
                    !updatedComponent.name
                ) {
                    console.error(
                        "D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:",
                        updatedComponent
                    );
                    return;
                }
                await fetchComponent(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch linh ki·ªán
            }
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t linh ki·ªán";
            console.error(err);
        }
    };

    // üü¢ X√≥a linh ki·ªán
    const deleteComponent = async (componentId) => {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        const result = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a linh ki·ªán n√†y kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, x√≥a ngay!",
            cancelButtonText: "H·ªßy",
        });

        if (!result.isConfirmed) return;

        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/components/delete-component/${componentId}`
            );

            // üü¢ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            Swal.fire({
                icon: "success",
                title: "ƒê√£ x√≥a",
                text: "X√≥a linh ki·ªán th√†nh c√¥ng!",
                showConfirmButton: false,
                timer: 1500,
            });

            // üßπ C·∫≠p nh·∫≠t danh s√°ch sau khi x√≥a
            if (response.data.success) {
                components.value = components.value.filter(
                    (component) => component.componentId !== componentId
                );
            }
        } catch (err) {
            console.error("L·ªói x√≥a linh ki·ªán:", err);

            // üü• Tr∆∞·ªùng h·ª£p linh ki·ªán ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong s·∫£n ph·∫©m
            if (
                err.response &&
                err.response.data &&
                err.response.data.errorCode === "ER_ROW_IS_REFERENCED_2"
            ) {
                Swal.fire({
                    icon: "error",
                    title: "Kh√¥ng th·ªÉ x√≥a",
                    text: "Linh ki·ªán n√†y ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong m·ªôt s·ªë s·∫£n ph·∫©m. Vui l√≤ng x√≥a ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m tr∆∞·ªõc.",
                });
            } else {
                // üîß L·ªói kh√°c (m·∫°ng, server, v.v.)
                Swal.fire({
                    icon: "error",
                    title: "L·ªói",
                    text: "Kh√¥ng th·ªÉ x√≥a linh ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.",
                });
            }
        }
    };

    return {
        components,
        error,
        fetchComponent,
        addComponent,
        updateComponent,
        deleteComponent,
    };
});
