import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";
import dayjs from "dayjs";

export const useNewStore = defineStore("news", () => {
    const news = ref([]); // Danh s√°ch b√†i vi·∫øt
    const newCurrent = ref({}); // B√†i vi·∫øt ƒëang xem
    const loading = ref(false);
    const error = ref(null);

    // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ b√†i vi·∫øt
    const fetchNews = async () => {
        loading.value = true;
        error.value = null;
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/news"
            );

            // Format ng√†y th√°ng
            news.value = response.data.map((newItem) => ({
                ...newItem,
                updatedAt: dayjs(newItem.updatedAt).format(
                    "DD/MM/YYYY, HH:mm A"
                ),
            }));
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√†i vi·∫øt";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    // üü¢ L·∫•y th√¥ng tin b√†i vi·∫øt theo ID
    const fetchNewDataByID = async (newId) => {
        newId = Number(newId);

        newCurrent.value = {}; // üîÑ Reset tr∆∞·ªõc khi g·ªçi API

        loading.value = true;
        error.value = null;
        try {
            const response = await axios.get(
                `http://localhost:3000/api/v1/data/news/${newId}`
            );

            if (!response.data) {
                throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu b√†i vi·∫øt");
            }

            newCurrent.value = {
                ...response.data[0],
                updatedAt: dayjs(response.data[0].updatedAt).format(
                    "DD/MM/YYYY, HH:mm A"
                ),
            };
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    // üü¢ Th√™m b√†i vi·∫øt m·ªõi
    const addNews = async (newData) => {
        try {
            console.log("G·ª≠i API v·ªõi d·ªØ li·ªáu:", newData);
            const response = await axios.post(
                "http://localhost:3000/api/v1/data/news/add-new",
                newData
            );
            console.log("K·∫øt qu·∫£ API:", response.data);

            if (response.data.success) {
                this.news.unshift(response.data.newArticle);
                return { success: true };
            } else {
                return { success: false, message: response.data.message };
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi th√™m b√†i vi·∫øt:", error);
            return { success: false, message: "L·ªói server" };
        }
    };

    // üü¢ C·∫≠p nh·∫≠t b√†i vi·∫øt
    const updateNews = async (newData) => {
        try {
            console.log("G·ª≠i API c·∫≠p nh·∫≠t v·ªõi d·ªØ li·ªáu:", newData);
            const response = await axios.put(
                `http://localhost:3000/api/v1/data/news/${newData.newId}`,
                newData
            );

            if (response.data.success) {
                fetchNews(); // L·∫•y l·∫°i danh s√°ch b√†i vi·∫øt
                return true;
            } else {
                return { success: false, message: response.data.message };
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:", error);
            return { success: false, message: "L·ªói server" };
        }
    };

    const deleteNews = async (newId) => {
        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/news-delete/${newId}`
            );
            if (response.status === 200) {
                fetchNews(); // C·∫≠p nh·∫≠t danh s√°ch b√†i vi·∫øt
                return true;
            }
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    return {
        news,
        newCurrent,
        loading,
        error,
        fetchNews,
        fetchNewDataByID,
        addNews,
        updateNews,
        deleteNews,
    };
});
