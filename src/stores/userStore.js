import { defineStore } from "pinia";
import { ref, computed } from "vue";
import axios from "axios";
import dayjs from "dayjs";
import Swal from "sweetalert2";

export const useUserStore = defineStore("user", () => {
    const users = ref([]);
    const user = ref(null);
    const isLoggedIn = computed(() => !!user.value);
    const isAdmin = computed(() => user.value?.role === "admin"); // ‚úÖ Ki·ªÉm tra role
    const countUsers = computed(() => users.value.length); // ‚úÖ S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng

    // H√†m login
    const login = async (credentials) => {
        try {
            const response = await axios.post(
                "http://localhost:3000/api/v1/auth/login",
                credentials,
                { withCredentials: true }
            );
            user.value = response.data.user;
            return true;
        } catch (error) {
            console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
            return false;
        }
    };

    // H√†m login b·∫±ng Google
    const loginWithGoogle = async (firebaseUser) => {
        try {
            const googleUser = {
                email: firebaseUser.email,
                displayName: firebaseUser.displayName,
                photoURL: firebaseUser.photoURL,
            };

            const response = await axios.post(
                "http://localhost:3000/api/v1/auth/google-login",
                googleUser,
                { withCredentials: true }
            );

            user.value = response.data.user;
        } catch (error) {
            console.error("L·ªói ƒëƒÉng nh·∫≠p Google:", error);
        }
    };

    // H√†m l·∫•y th√¥ng tin user t·ª´ API (d√†nh cho reload trang)
    const fetchUser = async () => {
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/auth/me",
                { withCredentials: true }
            );

            user.value = response.data;
        } catch (error) {
            console.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin user:", error);
            user.value = null;
        }
    };

    // H√†m logout
    const logout = async () => {
        // X√°c nh·∫≠n ƒëƒÉng xu·∫•t
        const result = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, ƒêƒÉng xu·∫•t",
            cancelButtonText: "H·ªßy",
        });

        if (!result.isConfirmed) return; // N·∫øu ng∆∞·ªùi d√πng kh√¥ng x√°c nh·∫≠n th√¨ kh√¥ng l√†m g√¨ c·∫£

        try {
            await axios.post(
                "http://localhost:3000/api/v1/auth/logout",
                {},
                { withCredentials: true }
            );
            user.value = null;
            return true; // Tr·∫£ v·ªÅ true ƒë·ªÉ th√¥ng b√°o ƒëƒÉng xu·∫•t th√†nh c√¥ng
        } catch (error) {
            console.error("L·ªói khi ƒëƒÉng xu·∫•t:", error);
        }
    };

    const getAllUsers = async () => {
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/users",
                { withCredentials: true }
            );
            users.value = response.data.map((user) => ({
                ...user,
                updatedAt: dayjs(user.updatedAt).format("DD/MM/YYYY, HH:mm"),
            }));
        } catch (error) {
            console.error("L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
        }
    };

    const deleteUser = async (userId) => {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
        const confirm = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, X√≥a ng∆∞·ªùi d√πng",
            cancelButtonText: "H·ªßy",
        });

        if (!confirm.isConfirmed) return;

        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/delete-user/${userId}`,
                { withCredentials: true }
            );

            if (response.data.success) {
                users.value = users.value.filter(
                    (user) => user.userId !== userId
                );

                Swal.fire({
                    icon: "success",
                    title: "X√≥a th√†nh c√¥ng",
                    text: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a",
                    showConfirmButton: false,
                    timer: 1500,
                });

                return true;
            }
        } catch (error) {
            console.error("üö® L·ªói x√≥a ng∆∞·ªùi d√πng:", error);

            // ‚úÖ Hi·ªÉn th·ªã l·ªói c·ª• th·ªÉ n·∫øu l√† l·ªói r√†ng bu·ªôc kh√≥a ngo·∫°i
            if (error.response && error.response.status === 409) {
                Swal.fire({
                    icon: "error",
                    title: "Kh√¥ng th·ªÉ x√≥a",
                    text: "Ng∆∞·ªùi d√πng ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng c√°c d·ªãch v·ª• trong h·ªá th·ªëng, kh√¥ng th·ªÉ x√≥a",
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "L·ªói",
                    text: "ƒê√£ x·∫£y ra l·ªói khi x√≥a ng∆∞·ªùi d√πng",
                });
            }
        }
    };

    return {
        user,
        isLoggedIn,
        isAdmin,
        users,
        login,
        loginWithGoogle,
        fetchUser,
        logout,
        getAllUsers,
        deleteUser,
        countUsers,
    };
});
