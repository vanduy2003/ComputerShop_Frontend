import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";
import dayjs from "dayjs";
import Swal from "sweetalert2";

export const useCategoryStore = defineStore("category", () => {
    const categorys = ref([]); // Danh s√°ch danh m·ª•c
    const error = ref(null);

    // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ danh m·ª•c
    const fetchCategory = async () => {
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/category"
            );

            // ‚úÖ C·∫≠p nh·∫≠t l·∫°i to√†n b·ªô danh s√°ch v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t
            categorys.value = response.data.map((category) => ({
                ...category,
                createdAt: dayjs(category.createdAt).format(
                    "DD/MM/YYYY, HH:mm A"
                ),
            }));

            console.log("categorys", categorys.value);
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu danh m·ª•c";
            console.error(err);
        }
    };

    // üü¢ Th√™m danh m·ª•c m·ªõi
    const addCategory = async (category) => {
        try {
            const response = await axios.post(
                "http://localhost:3000/api/v1/data/category/add-category",
                category
            );

            const confirm = await Swal.fire({
                title: "Th√™m danh m·ª•c th√†nh c√¥ng",
                icon: "success",
                confirmButtonText: "OK",
            });

            if (!confirm.isConfirmed) {
                return;
            }

            const newCategory = response.data;
            if (!newCategory || !newCategory.categoryId || !newCategory.name) {
                console.error("D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", newCategory);
                return;
            }

            // ‚úÖ Th√™m tr·ª±c ti·∫øp v√†o danh s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
            categorys.value.unshift({
                ...newCategory,
                createdAt: dayjs(newCategory.createdAt).format(
                    "DD/MM/YYYY, HH:mm A"
                ),
            });
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ th√™m danh m·ª•c m·ªõi";
            console.error(err);
        }
    };

    // üü¢ C·∫≠p nh·∫≠t danh m·ª•c
    const updateCategory = async (category) => {
        try {
            await axios.put(
                `http://localhost:3000/api/v1/data/category/update-category/${category.categoryId}`,
                category
            );

            const confirm = await Swal.fire({
                title: "C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng",
                icon: "success",
                confirmButtonText: "OK",
            });

            if (!confirm.isConfirmed) {
                return;
            }

            // ‚úÖ C·∫≠p nh·∫≠t danh m·ª•c trong danh s√°ch m√† kh√¥ng c·∫ßn g·ªçi API l·∫°i
            const index = categorys.value.findIndex(
                (item) => item.categoryId === category.categoryId
            );
            if (index !== -1) {
                categorys.value[index] = {
                    ...category,
                    createdAt: dayjs(category.createdAt).format(
                        "DD/MM/YYYY, HH:mm A"
                    ),
                };
            }
            await fetchCategory();
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c";
            console.error(err);
        }
    };

    const deleteCategory = async (categoryId) => {
        const result = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, ch·∫Øc ch·∫Øn!",
            cancelButtonText: "H·ªßy",
        });

        if (!result.isConfirmed) {
            return;
        }

        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/category/delete-category/${categoryId}`
            );

            if (response.data.success) {
                // ‚úÖ X√≥a kh·ªèi danh s√°ch local
                categorys.value = categorys.value.filter(
                    (category) => category.categoryId !== categoryId
                );

                // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                await Swal.fire({
                    icon: "success",
                    title: "Th√†nh c√¥ng",
                    text: "X√≥a danh m·ª•c th√†nh c√¥ng",
                    showConfirmButton: false,
                    timer: 1500,
                });
            }
        } catch (err) {
            console.error("üö® L·ªói khi x√≥a danh m·ª•c:", err);

            if (err.response && err.response.status === 409) {
                await Swal.fire({
                    icon: "error",
                    title: "Kh√¥ng th·ªÉ x√≥a danh m·ª•c",
                    text: "Danh m·ª•c ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong s·∫£n ph·∫©m!",
                });
            } else {
                await Swal.fire({
                    icon: "error",
                    title: "L·ªói server",
                    text: "Kh√¥ng th·ªÉ x√≥a danh m·ª•c, vui l√≤ng th·ª≠ l·∫°i.",
                });
            }
        }
    };

    return {
        categorys,
        error,
        fetchCategory,
        addCategory,
        updateCategory,
        deleteCategory,
    };
});
