import { defineStore } from "pinia";
import { ref, computed } from "vue";
import axios from "axios";
import { safeParseJSON } from "../utils/utils"; // Import h√†m parse JSON
import Swal from "sweetalert2";
import { useRouter } from "vue-router";

export const useProductStore = defineStore("product", () => {
    // üîπ State
    const products = ref([]);
    const product = ref({});
    const selectedImage = ref("");
    const components = ref([]);
    const loading = ref(false);
    const error = ref(null);
    const totalProducts = computed(() => products.value.length);
    const router = useRouter(); // Kh·ªüi t·∫°o router

    // üîπ Actions
    // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
    const fetchProducts = async () => {
        loading.value = true;
        error.value = null;
        try {
            const response = await axios.get(
                "http://localhost:3000/api/v1/data/products"
            );
            products.value = response.data;
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    // üü¢ L·∫•y th√¥ng tin s·∫£n ph·∫©m theo ID
    const fetchProductDataID = async (productId) => {
        productId = Number(productId); // √âp ki·ªÉu ƒë·ªÉ tr√°nh l·ªói so s√°nh

        // üõë N·∫øu s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c load v√† ƒë√∫ng ID, kh√¥ng g·ªçi API n·ªØa
        if (product.value && product.value.id === productId) return;

        loading.value = true;
        error.value = null;
        try {
            const response = await axios.get(
                `http://localhost:3000/api/v1/data/products/${productId}`
            );
            if (!response.data || response.data.length === 0) {
                throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m");
            }

            let productData = response.data[0];

            // ‚úÖ Parse JSON an to√†n
            productData.imageDetail = safeParseJSON(
                productData.imageDetail,
                []
            );
            productData.components = safeParseJSON(productData.components, []);

            // ‚úÖ X√°c ƒë·ªãnh ·∫£nh ch√≠nh m·ªôt c√°ch an to√†n
            selectedImage.value =
                productData.imageUrl || // üü¢ ∆Øu ti√™n ·∫£nh ch√≠nh
                productData.imageDetail?.[0] || // üîπ N·∫øu kh√¥ng c√≥ ·∫£nh ch√≠nh, l·∫•y ·∫£nh ph·ª• ƒë·∫ßu ti√™n
                "https://via.placeholder.com/500"; // üî∏ N·∫øu kh√¥ng c√≥ ·∫£nh, d√πng ·∫£nh m·∫∑c ƒë·ªãnh

            product.value = productData;
            components.value = productData.components;
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    // üü¢ Th√™m s·∫£n ph·∫©m
    const addProduct = async (productData) => {
        try {
            const response = await axios.post(
                "http://localhost:3000/api/v1/data/product-add",
                productData
            );
            if (response.status === 201) {
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                const confirm = await Swal.fire({
                    title: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!",
                    icon: "success",
                    showCancelButton: true,
                    confirmButtonText: "Xem danh s√°ch s·∫£n ph·∫©m",
                    cancelButtonText: "ƒê√≥ng",
                });

                if (confirm.isConfirmed) {
                    router.push("/admin/products-list-manage"); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn danh s√°ch s·∫£n ph·∫©m
                }

                return true;
            }
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    // üü¢ X√≥a s·∫£n ph·∫©m
    const deleteProduct = async (productId) => {
        const confirm = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "C√≥, X√≥a s·∫£n ph·∫©m",
            cancelButtonText: "H·ªßy",
        });

        if (!confirm.isConfirmed) return; // N·∫øu ng∆∞·ªùi d√πng kh√¥ng x√°c nh·∫≠n th√¨ kh√¥ng l√†m g√¨ c·∫£

        try {
            const response = await axios.delete(
                `http://localhost:3000/api/v1/data/product-delete/${productId}`
            );
            if (response.status === 200) {
                fetchProducts(); // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
                return true;
            }
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    // c·∫≠p nh·∫≠t s·∫£n ph·∫©m
    const updateProduct = async (productData) => {
        try {
            const response = await axios.put(
                "http://localhost:3000/api/v1/data/product-update",
                productData
            );
            if (response.status === 200) {
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                const confirm = await Swal.fire({
                    title: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!",
                    icon: "success",
                    showCancelButton: true,
                    confirmButtonText: "Xem danh s√°ch s·∫£n ph·∫©m",
                    cancelButtonText: "ƒê√≥ng",
                });
                if (confirm.isConfirmed) {
                    router.replace("/admin/products-list-manage"); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn danh s√°ch s·∫£n ph·∫©m
                }
                return true;
            }
        } catch (err) {
            error.value = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m";
            console.error(err);
        } finally {
            loading.value = false;
        }
    };

    return {
        // State
        products,
        product,
        selectedImage,
        components,
        loading,
        error,
        totalProducts,
        // Actions
        fetchProducts,
        fetchProductDataID,
        addProduct,
        deleteProduct,
        updateProduct,
    };
});
