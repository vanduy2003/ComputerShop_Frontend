import { createRouter, createWebHistory } from "vue-router";
import { useUserStore } from "@/stores/userStore";

// Import c√°c trang
import HomePage from "../views/Home/HomePage.vue";
import ProductDetailPage from "../views/Product/ProductDetailPage.vue";
import CartsPage from "@/views/Cart/CartsPage.vue";
import NewPage from "@/views/New/NewPage.vue";
import ListCategoryPage from "@/views/Category/ListCategoryPage.vue";
import CartsConfirmPage from "@/views/Cart/CartsConfirmPage.vue";
import BuySuccessPage from "@/views/Cart/BuySuccessPage.vue";
import PageError from "@/views/PageError.vue";
import AdminDashboardPage from "@/views/Manager/AdminDashboardPage.vue";
import ProductManage from "@/components/manager/ProductManager/ProductManage.vue";
import AddProduct from "@/components/manager/ProductManager/AddProduct.vue";

const routes = [
    { path: "/", component: HomePage },
    { path: "/products/:id", component: ProductDetailPage },
    { path: "/new/:id", component: NewPage },
    { path: "/category/:id", component: ListCategoryPage },
    { path: "/me/cart", component: CartsPage },
    { path: "/me/cart/cart-confirm-buy", component: CartsConfirmPage },
    { path: "/me/cart/buy-success/:id", component: BuySuccessPage },

    // üöÄ C√°c route admin (ch·ªâ d√†nh cho admin)
    {
        path: "/admin/dashboard",
        component: AdminDashboardPage,
        meta: { requiresAdmin: true },
    },

    {
        path: "/admin/products-list-manage",
        component: ProductManage,
        meta: { requiresAdmin: true }, // ‚úÖ B·ªï sung meta.requiresAdmin
    },

    {
        path: "/admin/products/add-product",
        component: AddProduct,
        props: () => ({ isEdit: false }), // ‚úÖ Tr√°nh l·ªói undefined
        meta: { requiresAdmin: true },
    },
    {
        path: "/admin/products/edit/:id",
        component: AddProduct,
        props: (route) => ({ isEdit: true, id: route.params.id }), // ‚úÖ Truy·ªÅn ID v√†o component
        meta: { requiresAdmin: true },
    },

    // üö® Route b·∫Øt t·∫•t c·∫£ c√°c ƒë∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá
    { path: "/:pathMatch(.*)*", component: PageError },
];

const router = createRouter({
    history: createWebHistory(),
    routes,
    scrollBehavior: () => ({ top: 0 }), // ‚úÖ Cu·ªôn l√™n ƒë·∫ßu trang khi chuy·ªÉn route
});

// üöÄ Middleware ki·ªÉm tra quy·ªÅn admin tr∆∞·ªõc khi v√†o trang admin
router.beforeEach(async (to, from, next) => {
    const userStore = useUserStore();

    // N·∫øu ch∆∞a c√≥ th√¥ng tin user, g·ªçi API ƒë·ªÉ l·∫•y
    if (!userStore.user) {
        await userStore.fetchUser();
    }

    // N·∫øu v√†o trang admin m√† kh√¥ng ph·∫£i admin ‚Üí Chuy·ªÉn v·ªÅ trang ch√≠nh
    if (to.meta.requiresAdmin && !userStore.isAdmin) {
        next("/"); // ‚úÖ Chuy·ªÉn v·ªÅ trang Home
    } else {
        next();
    }
});

export default router;
